#! /bin/bash

ipara=$(awk '/iparallel/{print $1}' AFSSH.inp)
iflow=$(awk '/iflow/{print $1}' AFSSH.inp)
imaxproc=$(awk '/iproc/{print $1}' AFSSH.inp)
iwait=$(awk '/iwait/{print $1}' AFSSH.inp)

crdir()
{
  for((i=1;i<=$ipara;i++)); do
    if [ -d $i ]; then
      rm -r $i
      mkdir $i
    else
      mkdir $i
    fi
    cd $i
    cp ../aout .
    cp ../*.inp .
    cp ../sub.sh .
    echo $i > ifolder.inp
    njobs=$(qstat|grep iitb|grep -c R)
    while [ $njobs -ge $imaxproc ]
    do
        ## wait for 2 mins and recheck  status of jobs
        sleep $iwait
        njobs=$(qstat|grep iitb|grep -c R)
    done
    qsub sub.sh
    cd ..
  done
}


avg()
{
  if [ $ipara == 1 ]; then
    echo "Cannot average. Not parallel job",$ipara
  else
    for((i=1;i<=$ipara;i++)); do
      file_ra=$file_ra" $i/pop.out"
    done
    for((i=1;i<=$ipara;i++)); do
      file_cn=$file_cn" $i/cnts.out"
    done
    awk '{
      for(i=1;i<=NF;i++) su[FNR,i]=su[FNR,i]+$i}
      END{
        for(i=1;i<=FNR;i++){
          for(j=1;j<=NF;j++){
            su[i,j]=su[i,j]*FNR/NR
            printf "%15.7f",su[i,j]
            }
          print ""
        }
    }' $file_ra > pop.out

    awk '{
      for(i=1;i<=NF;i++) su[FNR,i]=su[FNR,i]+$i}
      END{
        for(i=1;i<=FNR;i++){
          for(j=1;j<=NF;j++){
            su[i,j]=su[i,j]*FNR/NR
            printf "%15.7f",su[i,j]
            }
          print ""
        }
    }' $file_cn > cnts.out 

  fi

}

variation_param()
{
  awk 'NR==1{$1=2}1' AFSSH.inp>save_AFSSH.inp

  while read lineno newvar dire
    do
      mkdir -p $dire
      cd $dire
      cp ../run .
      cp ../sub.sh .
      cp ../*.f* .
      cp ../makefile .
      cp ../time.sh .
      touch mod*
      awk 'NR==n{$1=x}1' n=$lineno x=$newvar ../save_AFSSH.inp>AFSSH.inp
      ./run
      cd ..
    done < variation.inp
}

variation_param_2()
{
  awk 'NR==1{$1=3}1' AFSSH.inp>save_AFSSH.inp

  while read lineno newvar
    do
      awk 'NR==n{$1=x}1' n=$lineno x=$newvar save_AFSSH.inp>AFSSH.inp
      ./aout
    done < variation_2.inp
}

compute_rates()
{
  while read lineno newvar dire
    do
      cd $dire
      pwd
      cp ../fit.py .
      awk 'NR==1{$1=3}1' AFSSH.inp>save_AFSSH.inp
      cp save_AFSSH.inp AFSSH.inp
      ./run
      python3 fit.py
      cd ..
    done < variation.inp
}


if [ $iflow == 1  ]; then
  ### serial execution
  echo "serial execution"
  make
  qsub sub.sh
elif [ $iflow == 2 ];then
  ### parallel execution
  echo "parallel execution, Number of cpus = "$ipara
  make
  crdir
elif [ $iflow == 3 ]; then
  ### average for parallel execution
  echo "Averaging data"
  avg
elif [ $iflow == 4 ]; then
  ### variation to parameters
  echo "Variation to parameters"
  variation_param
elif [ $iflow == 5 ]; then
  ### variation to parameters
  echo "Fitting rates"
  compute_rates
elif [ $iflow == 6 ]; then
  ### variation to parameters 2
  echo "Variation to parameters 2"
  variation_param_manas
else
  echo "no matching iflow",$iflow
fi

